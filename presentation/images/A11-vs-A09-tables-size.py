from matplotlib.ticker import FuncFormatter
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


fig = plt.figure()
ax1 = fig.add_axes([0.1, 0.7, 0.85, 0.2])
ax2 = fig.add_axes([0.1, 0.1, 0.85, 0.5])
#fig, (ax1, ax2) = plt.subplots(2, 1, sharex = True)
ax = fig.gca()

#plt.yscale('log')
ax1.set_ylim(10,400)

df = pd.DataFrame({ 
    'threshold'      : [ 0.50  , 0.55  , 0.60   , 0.65  , 0.70   , 0.75   , 0.80   , 0.85   , 0.9    , 0.95   ],
    'A11'           : [ (48791552+60899328+56934400)/1000000,
                        (48791552+52682752+44711936+60899328)/1000000,
                        (48791552+52682752+44711936+60899328)/1000000,
                        (48791552+52682752+44711936+60899328)/1000000,
                        (48791552+52682752+44711936+48791552+56934400)/1000000,
                        (48791552+52682752+44711936+48791552+56934400)/1000000,
                        (48791552+52682752+44711936+48791552+56934400)/1000000,
                        (48791552+44711936+48791552+40755200+40755200+56934400+52682752)/1000000,
                        (48791552+44711936+48791552+40755200+40755200+56934400+52682752)/1000000,
                        (48791552+48791552+44711936+52682752+48791552+40755200+40755200+56934400)/1000000],
    'A09_nearest'   : [(48791552+52682752+56934400)/1000000,
                       (48791552+52682752+52682752+36790272)/1000000,
                       (48791552+52682752+52682752+36790272)/1000000,
                       (48791552+48791552+56934400+36790272)/1000000,
                       (48791552+48791552+36790272+44711936+40755200)/1000000,
                       (48791552+48791552+36790272+44711936+40755200)/1000000,
                       (48791552+40755200+36790272+44711936+44711936)/1000000,
                       (48791552+40755200+44711936+48791552+32899072+32899072)/1000000,
                       (48791552+40755200+44711936+48791552+32899072+32899072)/1000000,
                       (48791552+40755200+44711936+40755200+32899072+40755200)/1000000],
    'A09_separate'  : [(48791552+52682752+44711936+40755200)/1000000,
                       (48791552+40755200+52682752+36790272+40755200)/1000000,
                       (48791552+40755200+52682752+36790272+40755200)/1000000,
                       (48791552+40755200+52682752+36790272+40755200)/1000000,
                       (48791552+40755200+32899072+44711936+36790272+44711936)/1000000, 
                       (48791552+40755200+32899072+44711936+36790272+44711936)/1000000,
                       (48791552+40755200+32899072+44711936+36790272+44711936)/1000000,
                       (48791552+32899072+44711936+40755200+32899072+48791552)/1000000,
                       (48791552+32899072+44711936+40755200+32899072+48791552)/1000000,
                       (48791552+32899072+44711936+40755200+32899072+48791552)/1000000],
    'A09_replicate' : [(48791552+60899328+56934400)/1000000,
                       (48791552+48791552+60899328+44711936)/1000000,
                       (48791552+48791552+60899328+44711936)/1000000,
                       (48791552+48791552+60899328+44711936)/1000000,
                       (48791552+48791552+48791552+56934400+44711936)/1000000,
                       (48791552+48791552+48791552+56934400+44711936)/1000000,
                       (48791552+48791552+48791552+56934400+44711936)/1000000,
                       (48791552+48791552+56934400+48791552+44711936)/1000000,
                       (48791552+48791552+56934400+48791552+44711936)/1000000,
                       (48791552+48791552+56934400+44711936+40755200+48791552)/1000000]
})

clusters_count = [3,4,4,4,5,5,5,7,7,8,
                  3,4,4,4,5,5,5,6,6,6,
                  4,5,5,5,6,6,6,6,6,6,
                  3,4,4,4,5,5,5,5,5,6]

borders = [[48791552, 60899328, 56934400],[48791552, 52682752, 44711936, 60899328],[48791552, 52682752, 44711936, 60899328],[48791552, 52682752, 44711936, 60899328],[48791552, 52682752, 44711936, 48791552, 56934400],[48791552, 52682752, 44711936, 48791552, 56934400],[48791552, 52682752, 44711936, 48791552, 56934400],[48791552, 44711936, 48791552, 40755200, 40755200, 56934400, 52682752],[48791552, 44711936, 48791552, 40755200, 40755200, 56934400, 52682752],[48791552, 48791552, 44711936, 52682752, 48791552, 40755200, 40755200, 56934400],
           [48791552, 52682752, 56934400],[48791552, 52682752, 52682752, 36790272],[48791552, 52682752, 52682752, 36790272],[48791552, 48791552, 56934400, 36790272],[48791552, 48791552, 36790272, 44711936, 40755200],[48791552, 48791552, 36790272, 44711936, 40755200],[48791552, 40755200, 36790272, 44711936, 44711936],[48791552, 40755200, 44711936, 48791552, 32899072, 32899072],[48791552, 40755200, 44711936, 48791552, 32899072, 32899072],[48791552, 40755200, 44711936, 40755200, 32899072, 40755200],
           [48791552, 52682752, 44711936, 40755200],[48791552, 40755200, 52682752, 36790272, 40755200],[48791552, 40755200, 52682752, 36790272, 40755200],[48791552, 40755200, 52682752, 36790272, 40755200],[48791552, 40755200, 32899072, 44711936, 36790272, 44711936], [48791552, 40755200, 32899072, 44711936, 36790272, 44711936],[48791552, 40755200, 32899072, 44711936, 36790272, 44711936],[48791552, 32899072, 44711936, 40755200, 32899072, 48791552],[48791552, 32899072, 44711936, 40755200, 32899072, 48791552],[48791552, 32899072, 44711936, 40755200, 32899072, 48791552],
           [48791552, 60899328, 56934400],[48791552, 48791552, 60899328, 44711936],[48791552, 48791552, 60899328, 44711936],[48791552, 48791552, 60899328, 44711936],[48791552, 48791552, 48791552, 56934400, 44711936],[48791552, 48791552, 48791552, 56934400, 44711936],[48791552, 48791552, 48791552, 56934400, 44711936],[48791552, 48791552, 56934400, 48791552, 44711936],[48791552, 48791552, 56934400, 48791552, 44711936],[48791552, 48791552, 56934400, 44711936, 40755200, 48791552]]   

dfplot = df.plot(kind = 'bar', width = 0.85, x = 'threshold', y = ['A11', 'A09_nearest', 'A09_separate','A09_replicate'],
        ax = ax, fontsize = 10, rot = 0, color = ['#0d00f2','#73008c','#a60059', '#ff0000'])

k = 0
for i in dfplot.patches :
        ax2.text(i.get_x() + 0.06, i.get_height() + 2, str(clusters_count[k]), fontsize = 12)
        h = 0
        borders[k].sort(reverse = True)
        for j in borders[k] :
                ax2.plot([i.get_x() + 0.005, i.get_x() + 0.207],[(h+j)/1000000,(h+j)/1000000], color = 'white')
                h += j
        k+=1

ax1.axhline(1356341248/1000000, color = 'black')
ax1.text(0.068,(1356341248 + 5000000)/1000000, 'full table size', rotation = 0, fontsize = 14)
ax2.axhline(96976896/1000000, color = 'black')
ax2.text(0,(96976896 + 5000000)/1000000, 'pinched table size', rotation = 0, fontsize = 14)
ax1.set_title('storage costs', fontsize = 14)
ax1.set_ylabel('megabytes', fontsize = 12)
ax2.set_xlabel('threshold', fontsize = 12)

ax1.set_ylim(1300,1400)
ax1.spines['bottom'].set_visible(False)
ax1.xaxis.tick_top()
ax1.tick_params(labeltop = 'off') 

ax2.set_ylim(0, 400) 
ax2.spines['top'].set_visible(False)
ax2.xaxis.tick_bottom()

d = .005  
kwargs = dict(transform = ax1.transAxes, color = 'k', clip_on = False)
ax2.plot((-d, +d), (-d, +d), **kwargs)   
ax2.plot((1 - d, 1 + d), (-d, +d), **kwargs)
kwargs.update(transform = ax2.transAxes)
ax2.plot((-d, +d), (1 - d, 1 + d), **kwargs)
ax2.plot((1 - d, 1 + d), (1 - d, 1 + d), **kwargs) 
plt.show()
